version: '3.5'

services:

    app:
        build: .
        container_name: "${PROJECT_NAME}_app"
        volumes:
            - .:/var/www/catalog
            - ./.docker/php/custom.ini:/usr/local/etc/php/conf.d/custom.ini
        networks:
            - catalog
        depends_on:
            - db
            - redis
        environment:
            - OPCACHE_ENABLE=${OPCACHE_ENABLE:-1}
            - XDEBUG_MODE=${XDEBUG_MODE:-debug}
            - XDEBUG_CLIENT_HOST=${XDEBUG_CLIENT_HOST:-host.docker.internal}
            - XDEBUG_CLIENT_PORT=${XDEBUG_CLIENT_PORT:-9003}

    nginx:
        image: nginx:1.15.0-alpine
        container_name: "${PROJECT_NAME}_nginx"
        working_dir: /var/www
        restart: always
        tty: true
        ports:
            - "9008:9008"
            - "443:443"
        volumes:
            - .:/var/www/catalog:cached
            - ./.docker/nginx/conf.d:/etc/nginx/conf.d
#            - ./.docker/nginx/ssl:/etc/nginx/ssl
        networks:
            - catalog
        depends_on:
            - app
        labels:
            - 'traefik.http.routers.${PROJECT_NAME}_nginx.rule=HostRegexp(`${PROJECT_DOMAIN}`, `{subdomain:[a-z]+.${PROJECT_DOMAIN}}`)'
            - 'traefik.http.routers.${PROJECT_NAME}_nginx.priority=1'
            - 'traefik.docker.network=proxy'

    db:
        build: ./.docker/mysql
        container_name: "${PROJECT_NAME}_db"
        restart: always
        tty: true
        ports:
            - "33006:3306"
        volumes:
            - ./.docker/dbdata:/var/lib/mysql
            - ./.docker/mysql:/docker-entrypoint-initdb.d
        environment:
            - MYSQL_DATABASE=code_micro_videos
            - MYSQL_ROOT_PASSWORD=root
        networks:
            - catalog

    redis:
        image: redis:alpine
        container_name: "${PROJECT_NAME}_redis"
        networks:
            - catalog
    traefik:
        image: traefik:v2.0
        container_name: "${PROJECT_NAME}_traefik"
        restart: always
        command:
            - --entrypoints.web.address=:80
            - --providers.docker=true
            - --api.insecure=true
            - --log.level=debug
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
        ports:
            - '80:80'
            - '8080:8080'
        networks:
            - catalog

networks:
    catalog:
     driver: bridge
